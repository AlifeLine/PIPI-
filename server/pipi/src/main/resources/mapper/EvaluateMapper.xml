<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pipi.dao.mapper.EvaluateMapper">
	<resultMap id="BaseResultMap" type="com.pipi.dao.pojo.Evaluate">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="disk_id" property="diskId" jdbcType="INTEGER" />
		<result column="order_id" property="orderId" jdbcType="VARCHAR" />
		<result column="openid" property="openid" jdbcType="VARCHAR" />
		<result column="nickname" property="nickname" jdbcType="VARCHAR" />
		<result column="avatar_url" property="avatarUrl" jdbcType="VARCHAR" />
		<result column="content" property="content" jdbcType="VARCHAR" />
		<result column="imgs" property="imgs" jdbcType="VARCHAR" />
		<result column="is_anoymous" property="isAnoymous" jdbcType="INTEGER" />
		<result column="eval_Value" property="evalValue" jdbcType="INTEGER" />
		<result column="created" property="created" jdbcType="TIMESTAMP" />
		<result column="updated" property="updated" jdbcType="TIMESTAMP" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, disk_id, order_id, openid, nickname, avatar_url, content, imgs,
		is_anoymous,
		eval_Value, created, updated
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="com.pipi.dao.pojo.EvaluateExample">
		select
		<if test="distinct">
			distinct
		</if>
		'false' as QUERYID,
		<include refid="Base_Column_List" />
		from evaluate
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from evaluate
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from evaluate
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.pipi.dao.pojo.Evaluate">
		insert into evaluate (id, disk_id, order_id,
		openid, nickname, avatar_url,
		content, imgs, is_anoymous,
		eval_Value, created, updated
		)
		values (#{id,jdbcType=INTEGER}, #{diskId,jdbcType=INTEGER},
		#{orderId,jdbcType=VARCHAR},
		#{openid,jdbcType=VARCHAR}, #{nickname,jdbcType=VARCHAR}, #{avatarUrl,jdbcType=VARCHAR},
		#{content,jdbcType=VARCHAR}, #{imgs,jdbcType=VARCHAR},
		#{isAnoymous,jdbcType=INTEGER},
		#{evalValue,jdbcType=INTEGER}, #{created,jdbcType=TIMESTAMP}, #{updated,jdbcType=TIMESTAMP}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.pipi.dao.pojo.Evaluate">
		insert into evaluate
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="diskId != null">
				disk_id,
			</if>
			<if test="orderId != null">
				order_id,
			</if>
			<if test="openid != null">
				openid,
			</if>
			<if test="nickname != null">
				nickname,
			</if>
			<if test="avatarUrl != null">
				avatar_url,
			</if>
			<if test="content != null">
				content,
			</if>
			<if test="imgs != null">
				imgs,
			</if>
			<if test="isAnoymous != null">
				is_anoymous,
			</if>
			<if test="evalValue != null">
				eval_Value,
			</if>
			<if test="created != null">
				created,
			</if>
			<if test="updated != null">
				updated,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="diskId != null">
				#{diskId,jdbcType=INTEGER},
			</if>
			<if test="orderId != null">
				#{orderId,jdbcType=VARCHAR},
			</if>
			<if test="openid != null">
				#{openid,jdbcType=VARCHAR},
			</if>
			<if test="nickname != null">
				#{nickname,jdbcType=VARCHAR},
			</if>
			<if test="avatarUrl != null">
				#{avatarUrl,jdbcType=VARCHAR},
			</if>
			<if test="content != null">
				#{content,jdbcType=VARCHAR},
			</if>
			<if test="imgs != null">
				#{imgs,jdbcType=VARCHAR},
			</if>
			<if test="isAnoymous != null">
				#{isAnoymous,jdbcType=INTEGER},
			</if>
			<if test="evalValue != null">
				#{evalValue,jdbcType=INTEGER},
			</if>
			<if test="created != null">
				#{created,jdbcType=TIMESTAMP},
			</if>
			<if test="updated != null">
				#{updated,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.pipi.dao.pojo.Evaluate">
		update evaluate
		<set>
			<if test="diskId != null">
				disk_id = #{diskId,jdbcType=INTEGER},
			</if>
			<if test="orderId != null">
				order_id = #{orderId,jdbcType=VARCHAR},
			</if>
			<if test="openid != null">
				openid = #{openid,jdbcType=VARCHAR},
			</if>
			<if test="nickname != null">
				nickname = #{nickname,jdbcType=VARCHAR},
			</if>
			<if test="avatarUrl != null">
				avatar_url = #{avatarUrl,jdbcType=VARCHAR},
			</if>
			<if test="content != null">
				content = #{content,jdbcType=VARCHAR},
			</if>
			<if test="imgs != null">
				imgs = #{imgs,jdbcType=VARCHAR},
			</if>
			<if test="isAnoymous != null">
				is_anoymous = #{isAnoymous,jdbcType=INTEGER},
			</if>
			<if test="evalValue != null">
				eval_Value = #{evalValue,jdbcType=INTEGER},
			</if>
			<if test="created != null">
				created = #{created,jdbcType=TIMESTAMP},
			</if>
			<if test="updated != null">
				updated = #{updated,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.pipi.dao.pojo.Evaluate">
		update evaluate
		set disk_id = #{diskId,jdbcType=INTEGER},
		order_id = #{orderId,jdbcType=VARCHAR},
		openid = #{openid,jdbcType=VARCHAR},
		nickname = #{nickname,jdbcType=VARCHAR},
		avatar_url = #{avatarUrl,jdbcType=VARCHAR},
		content = #{content,jdbcType=VARCHAR},
		imgs = #{imgs,jdbcType=VARCHAR},
		is_anoymous = #{isAnoymous,jdbcType=INTEGER},
		eval_Value = #{evalValue,jdbcType=INTEGER},
		created = #{created,jdbcType=TIMESTAMP},
		updated = #{updated,jdbcType=TIMESTAMP}
		where id = #{id,jdbcType=INTEGER}
	</update>
	<select id="getRatioByDiskId" resultType="java.lang.String"
		parameterType="java.lang.Integer">
		select
		CONCAT(cast(cast(T1.sum / T2.sum as decimal(3,2))
		* 100 as DECIMAL(3)) , '%') as ratio
		from
		(select count(*) sum from evaluate where
		eval_Value=3 and
		disk_id=#{diskId,jdbcType=INTEGER}) T1,
		(select count(*) sum from
		evaluate where disk_id=#{diskId,jdbcType=INTEGER}) T2
	</select>
</mapper>